// for blynk ESP2
#define BLYNK_TEMPLATE_ID "TMPL6-kTjpHlS"
#define BLYNK_TEMPLATE_NAME "AquaEasy Monitoring"
#define BLYNK_AUTH_TOKEN "n_nR6fFi1MIEU5bvtcOj1VEqK8qsqaDg"

#define BLYNK_PRINT Serial

//install libraries
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <ESP32Servo.h> // Library for Servo motor
#include <Wire.h>

char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "TP-Link_Extender";  // type your wifi name
char pass[] = "";  // type your wifi password

BlynkTimer timer; //import blynk timer function

int timedelay = 500;

#include <DFRobot_ESP_PH_WITH_ADC.h>

#define PH_PIN 34         // Analog pin for pH sensor
#define trigPin 25        //Set to GPIO 32
#define echoPin 26        //set to GPIO 33
#define servoPin 32       //Set to GPIO 35

#define VREF 3.3    //VREF (mv)
#define ADC_RES 4096 //ADC Resolution

#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

long duration;
float distanceCm;
float distanceInch;

// pH sensor setup
DFRobot_ESP_PH_WITH_ADC ph;

//SET RELAY PINS
#define inlet_valve_relay 21
#define pump_out_relay 16

//define blynk switch variable
bool mode = false;
bool inlet_switch = true;
bool pump_out_switch = true;
//bool filter_switch = true;

int percentage_level;

float pHValue;


//VALVE = 8, SMALL PUMP = 9, FILTER = 7, MANUAL CONTROL = 10

BLYNK_WRITE(V12){
  mode = param.asInt();
}

BLYNK_WRITE(V8){
  inlet_switch = !param.asInt();
  digitalWrite(inlet_valve_relay, inlet_switch);
}

BLYNK_WRITE(V9){
  pump_out_switch = !param.asInt();
  digitalWrite(pump_out_relay, pump_out_switch);
}

//Water Level
void ControlWaterLevel(){

  // pH reading
  float voltagePH = analogRead(PH_PIN) / 4096.0 * 3300;
  float phValue = ph.readPH(voltagePH, 25);

  ph.calibration(voltagePH, 25);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;

  int sonicdistance = 8;

  float percentage_level = 100 - ((distanceInch-4)/(sonicdistance))*100;

  if (mode == 1){
  }

  else{
    if (phValue > 7 && phValue < 8.5){
      if(percentage_level < 30){
          digitalWrite(pump_out_relay, LOW);  // Turn on drain pump
          //Blynk.virtualWrite(V9, HIGH);
          delay(5000);  // Adjust the delay as needed for draining time
          digitalWrite(pump_out_relay, HIGH);   // Turn off drain pump
          //Blynk.virtualWrite(V9, LOW);
      } 
      else if (percentage_level > 90) {
          digitalWrite(inlet_valve_relay, LOW);   // Turn on fill pump
          //Blynk.virtualWrite(V8, HIGH);
          delay(5000);  // Adjust the delay as needed for filling time
          digitalWrite(inlet_valve_relay, HIGH);    // Turn off fill pump
          //Blynk.virtualWrite(V8, LOW);
      }
      else{
        digitalWrite(inlet_valve_relay,HIGH);
        digitalWrite(pump_out_relay, HIGH);
        Blynk.virtualWrite(V9, 0);
        Blynk.virtualWrite(V8, 0);
      }
    }
    else if (percentage_level > 95 && phValue <= 7 && phValue >=8.5){
        digitalWrite(inlet_valve_relay, LOW);
        Blynk.virtualWrite(inlet_valve_relay, 1);   // Turn on fill pump
    }
    else{
        digitalWrite(inlet_valve_relay,HIGH);
        digitalWrite(pump_out_relay, HIGH);
        Blynk.virtualWrite(V9, 0);
        Blynk.virtualWrite(V8, 0);
    }
  }
}

void setup() {
  Serial.begin(115200);

  // pH sensor setup
  ph.begin();

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output` 
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input

  pinMode(inlet_valve_relay, OUTPUT); // Sets the inlet as an Output`
  pinMode(pump_out_relay, OUTPUT); // Sets the pump as an Output`

  //SET INITIAL RELAY STATE AT O
  digitalWrite(inlet_valve_relay, inlet_switch);
  digitalWrite(pump_out_relay, pump_out_switch);

  Blynk.virtualWrite(V8,1);
  Blynk.virtualWrite(V9,1);
 
  Blynk.begin(auth, ssid, pass);

  //SET TIMEER INTERVAL FOR EACH FUNCTION EX.1000L
  timer.setInterval(5000L, sendPH);
  timer.setInterval(3000L, sendWaterLevel);
  timer.setInterval(5000L, ControlWaterLevel);

}

void sendPH(){
  // pH reading
  float voltagePH = analogRead(PH_PIN) / 4096.0 * 3300;
  float phValue = ph.readPH(voltagePH, 25);
  ph.calibration(voltagePH, 25);
  Blynk.virtualWrite(V3,phValue);
}

void sendWaterLevel(){
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;

  int sonicdistance = 8;

  float percentage_level = 100 - ((distanceInch-4)/(sonicdistance))*100;

  Blynk.virtualWrite(V4,percentage_level);
}

void loop(){
  Blynk.run();
  timer.run();
}

