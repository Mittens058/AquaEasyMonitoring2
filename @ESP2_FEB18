// for blynk ESP2 , FEB 17, 2024 2am
#define BLYNK_TEMPLATE_ID "TMPL6-kTjpHlS"
#define BLYNK_TEMPLATE_NAME "AquaEasy Monitoring"
#define BLYNK_AUTH_TOKEN "hleI-MTUdjZQOGpFs3WLWRWjc-V1u8QI"

#define BLYNK_PRINT Serial

//install libraries
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <Wire.h>
#include <ESP32Servo.h> // Library for Servo motor
#include <OneWire.h>
#include <DallasTemperature.h>

char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "PLDTHOMEFIBR6cd90";  // type your wifi name
char pass[] = "Bridgette_24";  // type your wifi password

BlynkTimer timer; //import blynk timer function

//#include <DFRobot_ESP_PH_WITH_ADC.h>

int timedelay = 500;

#define TEMP_PIN 33     ///temperature
#define PH_PIN 34         // Analog pin for pH sensor
#define trigPin 25        //Set to GPIO 32
#define echoPin 26        //set to GPIO 33
#define servoPin 32       //Set to GPIO 35

#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

long duration;
float distanceCm;
float distanceInch;

// Temperature sensor setup
OneWire oneWire(TEMP_PIN);
DallasTemperature DS18B20(&oneWire);

//SET RELAY PINS
#define inlet_valve_relay 21
#define pump_out_relay 16

//define blynk switch variable
bool mode = false;
bool inlet_switch = true ;
bool pump_out_switch = true;

int percentage_level;

float pHValue;
float voltage,phValue,temperature = 25;

float acidVoltage = 1900;
float neutralVoltage = 1500;


float salinity;

bool draining = false;   // Flag to indicate if water is draining

BLYNK_CONNECTED() {
  Blynk.syncAll();
}

BLYNK_WRITE(V2){
  float salinity = param.asInt();
}

BLYNK_WRITE(V10){
  mode = param.asInt();
}

BLYNK_WRITE(V8){
  inlet_switch = !param.asInt();
  digitalWrite(inlet_valve_relay, inlet_switch);
}

BLYNK_WRITE(V9){
  pump_out_switch = !param.asInt();
  digitalWrite(pump_out_relay, pump_out_switch);
}

void printSali(){
  Serial.print("Salinity: ");
  Serial.println(salinity);
}
void ControlWaterLevel(){

  voltage = (analogRead(PH_PIN))*(3300/4096.0);
  float slope = (7.0-4.0)/((neutralVoltage-1500)/3.0 - (acidVoltage-1500)/3.0);
  float intercept = 7.0 - slope*(neutralVoltage-1500)/3.0;
  float phValue = slope*(voltage-1500)/3.0+intercept; 
  
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;

  int sonicdistance = 8;

  float percentage_level = 100 - ((distanceInch-4)/(sonicdistance))*100;

  // temperature read
  DS18B20.requestTemperatures();
  float temperatureC = DS18B20.getTempCByIndex(0);

  if (mode == 1){
  }

  else{

    if (phValue < 7 || phValue > 8.5 || temperatureC > 31 ){
      if (draining) {
        // Turn on the pump relay to drain water
        digitalWrite(pump_out_relay, LOW); //BLIKTAD LA HIGH KEN LOW
        Blynk.virtualWrite(V9, 1);
        delay(5000); // Delay for stability, adjust as needed

        if (percentage_level <= 30.0) {
          draining = false; // Stop draining, start filling
          digitalWrite(pump_out_relay, HIGH); // Turn off the water pump
          Blynk.virtualWrite(V9, 0);
        }
      } 
      
      else {
        // Turn on the solenoid valve relay to fill water
        digitalWrite(inlet_valve_relay, LOW);
        Blynk.virtualWrite(V8, 1);
        delay(5000); // Delay for stability, adjust as needed

        if (percentage_level >= 90.0) {
          draining = true; // Stop filling, start draining
          digitalWrite(inlet_valve_relay, HIGH); // Turn off the solenoid valve
          Blynk.virtualWrite(V8, 0);
        }
      }
    }
    else{
      if(percentage_level < 90){
        digitalWrite(inlet_valve_relay, LOW); // ON INLET
        digitalWrite(pump_out_relay, HIGH); // Turn off PUMP
        Blynk.virtualWrite(V9, 0);
        Blynk.virtualWrite(V8, 1);
      }
      else{
        digitalWrite(pump_out_relay, HIGH);
        Blynk.virtualWrite(V9, 0);
        digitalWrite(inlet_valve_relay, HIGH);
        Blynk.virtualWrite(V8, 0);
      }
    }
  }
}

void setup() {
  Serial.begin(115200);
  
  // Temperature sensor setup
  DS18B20.begin();

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output` 
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input

  pinMode(inlet_valve_relay, OUTPUT); // Sets the inlet as an Output`
  pinMode(pump_out_relay, OUTPUT); // Sets the pump as an Output`

  Blynk.begin(auth, ssid, pass);

  //SET TIMEER INTERVAL FOR EACH FUNCTION EX.1000L
  timer.setInterval(5000L, sendPH);
  timer.setInterval(3000L, sendWaterLevel);
  timer.setInterval(5000L, ControlWaterLevel);
  timer.setInterval(5000L, sendTemp);
  timer.setInterval(10000L, printSali);
}

void sendTemp(){
  // temperature read
  DS18B20.requestTemperatures();
  float temperatureC = DS18B20.getTempCByIndex(0);
  Serial.print("Temperature: ");
  Serial.print(temperatureC);
  Serial.print(" Â°C\t");
  Blynk.virtualWrite(V0,temperatureC);

}

void sendPH(){
  voltage = (analogRead(PH_PIN))*(3300/4096.0);
  float slope = (7.0-4.0)/((neutralVoltage-1500)/3.0 - (acidVoltage-1500)/3.0);
  float intercept = 7.0 - slope*(neutralVoltage-1500)/3.0;
  float phValue = slope*(voltage-1500)/3.0+intercept; 
  Serial.println(voltage);
  Serial.println(phValue);
  Blynk.virtualWrite(V3,phValue);
}

void sendWaterLevel(){
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;

  int sonicdistance = 8;

  float percentage_level = 100 - ((distanceInch-4)/(sonicdistance))*100;

  Blynk.virtualWrite(V4,percentage_level);
}

void loop(){
  Blynk.run();
  timer.run();
}
