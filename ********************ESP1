//// ESP 1 feb 11, 12:32

//for blynk
#define BLYNK_TEMPLATE_ID "TMPL6-kTjpHlS"
#define BLYNK_TEMPLATE_NAME "AquaEasy Monitoring"
#define BLYNK_AUTH_TOKEN "n_nR6fFi1MIEU5bvtcOj1VEqK8qsqaDg"
#define BLYNK_PRINT Serial

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <HTTPClient.h>

#include <MovingAverageFilter.h>

char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "PLDTHOMEFIBR6cd90";  // type your wifi name
char pass[] = "Bridgette_24";  // type your wifi password

BlynkTimer timer; //import blynk timer function

//#include <DFRobot_ESP_PH_WITH_ADC.h>
//#include <EEPROM.h>
//#include "GravityTDS.h"

//GravityTDS gravityTds;
float temperature = 27;
float saltvalue;
float oxygen;

String server_name = "http://sgp1.blynk.cloud/external/api/batch/"; // <<< SEE COMMENTS

String bridge_token_1 = "hleI-MTUdjZQOGpFs3WLWRWjc-V1u8QI"; // token for the receiving device

// Pin definitions
#define TdsSensorPin 34             // Analog input pin for TDS sensor
#define DO_PIN 35                     // input pin for DO sensor    

#define AERATOR_PIN 18                // output pin to air pump
#define WP_UV_PIN 19

#define VREF 3300    //VREF (mv)
#define ADC_RES 4096 //ADC Resolution

//Single-point calibration Mode=0
//Two-point calibration Mode=1
#define TWO_POINT_CALIBRATION 0

#define READ_TEMP (25) //Current water temperature ℃, Or temperature sensor function

//Single point calibration needs to be filled CAL1_V and CAL1_T
#define CAL1_V (149) //mv
#define CAL1_T (25)   //℃
//Two-point calibration needs to be filled CAL2_V and CAL2_T
//CAL1 High temperature point, CAL2 Low temperature point
#define CAL2_V (1300) //mv
#define CAL2_T (15)   //℃

const uint16_t DO_Table[41] = {
    14460, 14220, 13820, 13440, 13090, 12740, 12420, 12110, 11810, 11530,
    11260, 11010, 10770, 10530, 10300, 10080, 9860, 9660, 9460, 9270,
    9080, 8900, 8730, 8570, 8410, 8250, 8110, 7960, 7820, 7690,
    7560, 7430, 7300, 7180, 7070, 6950, 6840, 6730, 6630, 6530, 6410};

uint8_t Temperaturet;
uint16_t ADC_Raw;
uint16_t ADC_Voltage;
uint16_t DO;

int16_t readDO(uint32_t voltage_mv, uint8_t temperature_c)
{
#if TWO_POINT_CALIBRATION == 0
  uint16_t V_saturation = (uint32_t)CAL1_V + (uint32_t)35 * temperature_c - (uint32_t)CAL1_T * 35;
  return (voltage_mv * DO_Table[temperature_c] / V_saturation);
#else
  uint16_t V_saturation = (int16_t)((int8_t)temperature_c - CAL2_T) * ((uint16_t)CAL1_V - CAL2_V) / ((uint8_t)CAL1_T - CAL2_T) + CAL2_V;
  return (voltage_mv * DO_Table[temperature_c] / V_saturation);
#endif
}

// pH sensor setup
//DFRobot_ESP_PH_WITH_ADC ph;

//relay setup
bool aerator_switch = true;
bool uv_switch = true;
bool mode = true;

// Initial state of the switch
unsigned long startTime = 0;  // Variable to store the start time when the value goes below the threshold

float DOValue;

MovingAverageFilter movingAverageFilter(20); // Adjust the filter size as needed

// Blynk virtual pin handler for the button widget
// Blynk virtual pin handler for the button widget

BLYNK_CONNECTED() {
  Blynk.syncAll();
}

BLYNK_WRITE(V10) {
 mode = param.asInt();
}

BLYNK_WRITE(V5) {
  aerator_switch = !param.asInt();
  digitalWrite(AERATOR_PIN, aerator_switch);
}

BLYNK_WRITE(V7) {
  uv_switch = !param.asInt();
  digitalWrite(WP_UV_PIN, uv_switch);

  if (mode == 1){ // if manual

  }
  else{
    if (uv_switch == 0){
      digitalWrite(WP_UV_PIN, LOW); // BALIKTAD
      Blynk.virtualWrite(V7, 1);
      delay(5000); // set delay for turning on ras

      digitalWrite(WP_UV_PIN, HIGH); // BALIKTAD
      Blynk.virtualWrite(V7, 0);
    }
    else{
      Blynk.virtualWrite(V7, 0);
    }
  }
}

// AERATOR FUNCTION
void runAerator(){
  Temperaturet = (uint8_t)READ_TEMP;
  ADC_Raw = analogRead(DO_PIN);
  ADC_Voltage = uint32_t(VREF) * ADC_Raw / ADC_RES;
  
  bool switchState = aerator_switch;

  //float DOValue = readDO(ADC_Voltage, Temperaturet);

  float currentDOValue = readDO(ADC_Voltage, Temperaturet);

  // Apply moving average filter to the DO value
  float DOValue = movingAverageFilter.process(currentDOValue);

  if (mode == 1){ // if manual

  }
  
  else{
    if (DOValue/1000 > 5){ // SUPPOSED TO BE LESS THAN
      if (!switchState) {  // Check if the switch is not already ON
        if (millis() - startTime >= 10000) {  // Check if 1 minute has passed
          digitalWrite(AERATOR_PIN, HIGH);  // Turn ON the switch
          Blynk.virtualWrite(V5, 0);
          switchState = true;  // Update the switch state
        }
        else {
          startTime = millis();  // Update the start time if the switch is already ON
        } 
      }
      else{
        digitalWrite(AERATOR_PIN, LOW);
        Blynk.virtualWrite(V5, 1);
        switchState = false;  // Update the switch state
      }
    }
    else{

      digitalWrite(AERATOR_PIN, LOW);
      Blynk.virtualWrite(V5, 1);

      if (switchState) {  // Check if the switch is not already ON
        if (millis() - startTime >= 10000) {  // Check if 1 minute has passed
          digitalWrite(AERATOR_PIN, LOW);  // Turn ON the switch
          Blynk.virtualWrite(V5, 1);
          switchState = false;  // Update the switch state
        }
        else {
          startTime = millis();  // Update the start time if the switch is already ON
        } 
    }
      else{
        digitalWrite(AERATOR_PIN, HIGH);
        Blynk.virtualWrite(V5, 0);
        switchState = true;  // Update the switch state
      }
    } 
  }
}



void setup() {
  Serial.begin(115200);

  movingAverageFilter = MovingAverageFilter(30); // Adjust the filter size as needed

  //TDS setup
  //gravityTds.setPin(TdsSensorPin);
  //gravityTds.setAref(3.3); //reference voltage on ADC, default 5.0V on Arduino UNO
  //gravityTds.setAdcRange(4096); //1024 for 10bit ADC;4096 for 12bit ADC
  //gravityTds.begin(); //initialization

  pinMode(AERATOR_PIN, OUTPUT);
  pinMode(WP_UV_PIN, OUTPUT);

  //INITIAL STATE FOR 
  digitalWrite(WP_UV_PIN, uv_switch);
  digitalWrite(AERATOR_PIN, aerator_switch);

  Blynk.begin(auth, ssid, pass);

  timer.setInterval(5000L, push_some_data);

  timer.setInterval(20000L, runAerator);
}

void loop(){
  Blynk.run();
  timer.run();
}


void push_some_data()
{
  int tdsValue = analogRead(TdsSensorPin);

  if (tdsValue<=500.00) 
  {
    float saltvalue = tdsValue/1000;

  } 
  else if (tdsValue > 500.00 && tdsValue <= 700.00) 
  {
    float saltvalue = ((500+((tdsValue-500)/30)*100))/1000;
  } 
  else if (tdsValue > 700.00 && tdsValue <= 1000.00) 
  {
    float saltvalue = ((1000+((tdsValue-700)/20)*100))/1000;
  } 
  else
  {
    float saltvalue = (2700+((tdsValue - 1000)/10)*100)/1000;
  }

  Serial.print("Salinity: ");
  Serial.println(saltvalue); 
  Blynk.virtualWrite(V2, saltvalue); //can change tds value to ppt value based on needed 

  Temperaturet = (uint8_t)READ_TEMP;
  ADC_Raw = analogRead(DO_PIN);
  ADC_Voltage = uint32_t(VREF) * ADC_Raw / ADC_RES;

  //float DOValue = readDO(ADC_Voltage, Temperaturet);

  float currentDOValue = readDO(ADC_Voltage, Temperaturet);

  // Apply moving average filter to the DO value
  float oxygen = (movingAverageFilter.process(currentDOValue))/1000;

  Serial.print("Oxygen: ");
  Serial.println(oxygen); 
  Blynk.virtualWrite(V1, oxygen); //can change tds value to ppt value based on needed

  HTTPClient http;

  String server_path = server_name + "update?token=" + bridge_token_1 + "&V2" + "=" +  float(saltvalue) + "&V1" + "=" +  float(oxygen);

  // Your Domain name with URL path or IP address with path
  http.begin(server_path.c_str());

  long request_time = millis();
  int httpResponseCode = http.GET();
  
  if (httpResponseCode>0)
  {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    String payload = http.getString();
  }
  else
  {
    Serial.print("Error code: ");
    Serial.print(httpResponseCode);
    Serial.print(" <-----------------------------------");    
  }
  
  // Free resources
  http.end();
}
